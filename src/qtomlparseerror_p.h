/*
 * MIT License
 *
 * Copyright (c) 2025 QToml Project
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Project Information:
 * - Generated by: Claude 4.0 Sonnet (Anthropic AI) on 2025-08-30
 * - Verified and reviewed by: Bestkakkoii
 * - Original project structure and implementation concepts
 * - Built upon toml++ library (https://github.com/marzer/tomlplusplus)
 * - Qt framework integration and wrapper implementation
 */

 /**
  * @file qtomlparseerror_p.h
  * @brief Private implementation details for QTomlParseError class.
  *
  * This header contains the private implementation class for QTomlParseError,
  * following Qt's PIMPL (Private Implementation) pattern. The private class
  * encapsulates internal data structures while providing binary compatibility
  * and compilation hiding for the public API.
  *
  * Design principles:
  * - Minimal data storage with maximum efficiency
  * - Pre-formatted error strings to avoid runtime formatting overhead
  * - Snake_case naming for internal member variables per project standards
  * - Qt naming conventions for class names (ClassNamePrivate)
  * - Exception-safe design through compiler-generated methods
  *
  * The implementation focuses on:
  * - Efficient string storage and manipulation
  * - Minimal memory footprint for error objects
  * - Fast access to formatted error information
  * - Thread-safe read operations through immutable design
  *
  * @note This file is part of the private API and should not be included directly
  * @note Implementation details may change between versions without notice
  * @note Only QTomlParseError and internal systems should access this interface
  * @see qtomlparseerror.h for the public interface
  */

#pragma once
#pragma execution_character_set("utf-8")

#include <QString>

  /**
   * @class QTomlParseErrorPrivate
   * @brief Private implementation class for QTomlParseError using PIMPL pattern.
   *
   * This class contains the actual data storage for QTomlParseError objects,
   * specifically focusing on efficient error message storage and retrieval.
   * The design emphasizes simplicity and performance through pre-formatted
   * error strings that avoid runtime formatting overhead.
   *
   * The class is designed for:
   * - **Memory efficiency**: Minimal storage overhead with single string member
   * - **Performance**: Pre-formatted strings eliminate runtime formatting costs
   * - **Simplicity**: Straightforward design with compiler-generated methods
   * - **Thread safety**: Immutable design after construction enables thread-safe reads
   *
   * Data storage strategy:
   * Rather than storing individual error components (description, line, column)
   * separately, this implementation stores a single pre-formatted string containing
   * all error information. This approach optimizes for the common case where error
   * messages are displayed to users rather than programmatically analyzed.
   *
   * Naming conventions:
   * - Class name follows Qt convention: QTomlParseErrorPrivate
   * - Member variables use snake_case per project coding standards
   * - Descriptive names that clearly indicate purpose and content
   *
   * Performance characteristics:
   * - Single string storage minimizes memory allocation overhead
   * - Pre-formatting eliminates repeated string construction costs
   * - Qt's implicit string sharing provides copy-on-write optimization
   * - Compiler-generated methods provide optimal copy/move semantics
   *
   * @note This class is not thread-safe for modifications (immutable after construction)
   * @note Direct manipulation of member variables should be avoided
   * @note Only the QTomlParseError public interface should modify this data
   *
   * @see QTomlParseError for the public interface
   * @see QString for string storage implementation details
   * @see PIMPL pattern documentation for design rationale
   */
class QTomlParseErrorPrivate
{
public:
	/**
	 * @brief Default constructor using compiler-generated implementation.
	 *
	 * Creates a QTomlParseErrorPrivate object with default-initialized
	 * member variables. The formatted error string is initialized to
	 * an empty QString, which will be populated by the public interface
	 * during error object construction.
	 *
	 * Initialization characteristics:
	 * - formatted_error_string_ is default-constructed (empty QString)
	 * - Ready for immediate use after construction
	 * - No dynamic memory allocation beyond QString's internal storage
	 * - Exception-safe through QString's exception-safe construction
	 *
	 * @complexity O(1) - Constant time default construction
	 * @exception Strong exception safety through QString default constructor
	 *
	 * @note Uses compiler-generated implementation for optimal performance
	 * @note Ready for error string assignment after construction
	 * @note Exception-safe design through standard library guarantees
	 */
	QTomlParseErrorPrivate() = default;

	/**
	 * @brief Copy constructor using compiler-generated implementation.
	 *
	 * Creates a deep copy of another QTomlParseErrorPrivate object,
	 * copying the formatted error string. The compiler-generated version
	 * is sufficient as QString has proper copy semantics with implicit
	 * sharing optimization.
	 *
	 * Copy characteristics:
	 * - Deep copy of error string content through QString copy constructor
	 * - Implicit sharing optimization may avoid actual string data copying
	 * - Complete independence between source and destination objects
	 * - Exception-safe copying through QString's copy semantics
	 *
	 * Performance optimization:
	 * Qt's QString uses implicit sharing (copy-on-write), so copying a
	 * QTomlParseErrorPrivate object is very efficient when the error
	 * string is not subsequently modified.
	 *
	 * @param other The QTomlParseErrorPrivate object to copy from
	 *
	 * @complexity O(1) - Constant time due to QString implicit sharing
	 * @exception Strong exception safety through QString copy constructor
	 *
	 * @note Compiler-generated version is explicitly declared for clarity
	 * @note QString's implicit sharing provides copy-on-write optimization
	 * @note Creates completely independent copy suitable for separate modification
	 */
	QTomlParseErrorPrivate(const QTomlParseErrorPrivate& other) = default;

	// ==================== Member Variables ====================

	/**
	 * @brief Pre-formatted complete error description string.
	 *
	 * Contains the complete, formatted error message including both the
	 * error description and position information in a human-readable format.
	 * This approach optimizes for display performance by pre-formatting
	 * the error string during construction rather than formatting on-demand.
	 *
	 * String format characteristics:
	 * - First line: Detailed error description from parser
	 * - Second line: Position information in parentheses
	 * - Complete, self-contained error message ready for display
	 * - Consistent formatting across all error types
	 *
	 * Content examples:
	 * - "Invalid escape sequence in string\n(error occurred at line 5, column 12)"
	 * - "Unexpected token ']'\n(error occurred at line 3, column 8)"
	 * - "No error occurred" (for success states)
	 *
	 * Performance benefits:
	 * - No runtime formatting overhead during error string access
	 * - QString implicit sharing provides efficient copying
	 * - Single memory allocation for complete error information
	 * - Ready for immediate display or logging without processing
	 *
	 * Storage considerations:
	 * - Uses QString for proper Unicode support and Qt integration
	 * - Implicit sharing minimizes memory usage for copied error objects
	 * - Pre-allocation during construction can minimize string reallocations
	 * - Thread-safe reads due to QString's thread-safe sharing implementation
	 *
	 * @note Contains complete formatted error message ready for display
	 * @note Uses QString implicit sharing for efficient copying
	 * @note Pre-formatted to eliminate runtime formatting overhead
	 * @note Thread-safe for read access through QString's design
	 *
	 * @see QString for string implementation and sharing details
	 * @see QTomlParseError::errorString() for access method
	 */
	QString formatted_error_string_;
};