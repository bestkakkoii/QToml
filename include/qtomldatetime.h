/*
 * MIT License
 *
 * Copyright (c) 2025 QToml Project
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Project Information:
 * - Generated by: Claude 4.0 Sonnet (Anthropic AI) on 2025-08-30
 * - Verified and reviewed by: Bestkakkoii
 * - Original project structure and implementation concepts
 * - Built upon toml++ library (https://github.com/marzer/tomlplusplus)
 * - Qt framework integration and wrapper implementation
 */

/**
 * @file qtomldatetime.h
 * @brief Declaration of QTomlDateTime class for TOML date and time value representation.
 * 
 * This header defines the QTomlDateTime class, which provides comprehensive support
 * for TOML's temporal data types. The TOML specification defines three distinct
 * temporal formats: local dates, local times, and full date-times with optional
 * timezone information. This class efficiently represents all these formats
 * while providing seamless integration with Qt's date-time system.
 * 
 * TOML temporal format support:
 * - Local Date: "1979-05-27" (date without time or timezone)
 * - Local Time: "07:32:00" or "07:32:00.999999" (time without date or timezone)
 * - Local Date-Time: "1979-05-27T07:32:00" (combined date-time without timezone)
 * - Offset Date-Time: "1979-05-27T07:32:00-08:00" (with timezone offset)
 * - UTC Date-Time: "1979-05-27T07:32:00Z" (UTC timezone)
 * 
 * The implementation uses the PIMPL idiom for binary compatibility and efficient
 * memory management, while maintaining full precision for all temporal components.
 * Integration with Qt's Meta-Object System enables use in QVariant containers
 * and signal/slot connections.
 * 
 * @note This class is designed to be value-semantic and thread-safe for read operations
 * @note Supports microsecond precision for time components
 * @note Fully compliant with TOML v1.0.0 specification temporal requirements
 * @see https://toml.io/en/v1.0.0#offset-date-time for TOML temporal specification
 */

#pragma once
#pragma execution_character_set("utf-8")

#include <QObject>
#include <QtGlobal>
#include <QDate>
#include <QTime>
#include <QDateTime>
#include <QTimeZone>
#include <memory>

class QTomlDateTimePrivate;

/**
 * @class QTomlDateTime
 * @brief Encapsulates TOML temporal values supporting multiple date-time representation formats.
 * 
 * QTomlDateTime provides a unified interface for handling all temporal formats
 * defined in the TOML specification. Unlike QDateTime which always requires both
 * date and time components, QTomlDateTime can represent date-only, time-only,
 * or complete date-time values, making it suitable for accurate TOML parsing
 * and generation.
 * 
 * The class maintains semantic distinction between different temporal types:
 * - **Date-only**: Represents calendar dates without time information
 * - **Time-only**: Represents times of day without date context
 * - **Date-time**: Represents complete temporal values with optional timezone
 * - **Null**: Represents absence of temporal data
 * 
 * Key design principles:
 * - **Type Safety**: Preserves the original temporal format from TOML
 * - **Precision**: Maintains microsecond precision for time components
 * - **Efficiency**: Uses PIMPL pattern for optimal memory usage and copy performance
 * - **Integration**: Seamless conversion to/from Qt's date-time classes
 * - **Standards Compliance**: Full adherence to TOML v1.0.0 temporal specifications
 * 
 * Memory and performance characteristics:
 * - Small memory footprint through efficient internal representation
 * - Fast copy operations through optimized PIMPL implementation
 * - Branch prediction optimization for common access patterns
 * - Exception-safe construction and destruction
 * 
 * Thread safety:
 * - Read operations are thread-safe (const methods)
 * - Modification requires external synchronization
 * - Copy construction is thread-safe
 * 
 * @note This class is registered with Qt's Meta-Object System for QVariant support
 * @note All temporal operations preserve original precision and format semantics
 * @note Invalid input data results in well-defined behavior (null or invalid states)
 * 
 * @example Basic usage examples:
 * @code
 * // Date-only representation
 * QTomlDateTime birthDate(QDate(1990, 12, 25));
 * Q_ASSERT(!birthDate.isNull());
 * Q_ASSERT(birthDate.date().isValid());
 * Q_ASSERT(!birthDate.time().isValid());     // No time component
 * 
 * // Time-only representation
 * QTomlDateTime dailyMeeting(QTime(14, 30, 0));
 * Q_ASSERT(!dailyMeeting.date().isValid()); // No date component
 * Q_ASSERT(dailyMeeting.time().isValid());
 * 
 * // Complete date-time with timezone
 * QDateTime utcMoment = QDateTime::currentDateTimeUtc();
 * QTomlDateTime timestamp(utcMoment);
 * Q_ASSERT(timestamp.date().isValid());
 * Q_ASSERT(timestamp.time().isValid());
 * Q_ASSERT(timestamp.timeZone().isValid());
 * 
 * // Conversion back to QDateTime
 * QDateTime reconstructed = timestamp.toQDateTime();
 * Q_ASSERT(reconstructed == utcMoment);      // Lossless round-trip
 * @endcode
 * 
 * @example TOML format mapping:
 * @code
 * // TOML: date = 1979-05-27
 * QTomlDateTime date(QDate(1979, 5, 27));
 * 
 * // TOML: time = 07:32:00.999999
 * QTomlDateTime time(QTime(7, 32, 0, 999));
 * 
 * // TOML: datetime = 1979-05-27T07:32:00Z
 * QDateTime utc(QDate(1979, 5, 27), QTime(7, 32, 0), QTimeZone::utc());
 * QTomlDateTime datetime(utc);
 * @endcode
 * 
 * @see QDate for date-only operations
 * @see QTime for time-only operations  
 * @see QDateTime for complete date-time operations
 * @see QTimeZone for timezone handling
 * @see QVariant for Meta-Object System integration
 */
class Q_CORE_EXPORT QTomlDateTime
{
	Q_GADGET
public:
	// ==================== Construction and Destruction ====================
	
	/**
	 * @brief Default constructor creating a null QTomlDateTime.
	 * 
	 * Creates a QTomlDateTime in the null state, representing the absence of
	 * temporal data. This is the equivalent of an uninitialized temporal value
	 * and serves as a sentinel for missing or invalid temporal information.
	 * 
	 * @complexity O(1) - Constant time construction
	 * @exception noexcept guarantee
	 * 
	 * @note Null objects can be tested with isNull() method
	 * @note All accessor methods return invalid values for null objects
	 * 
	 * @see isNull() for null state checking
	 */
	QTomlDateTime() noexcept;
	
	/**
	 * @brief Constructs QTomlDateTime from a date (date-only representation).
	 * 
	 * Creates a QTomlDateTime representing a local date without time information,
	 * corresponding to TOML's date format "YYYY-MM-DD". This represents pure
	 * calendar dates without any time or timezone context.
	 * 
	 * @param date The QDate object containing the date information
	 * 
	 * @complexity O(1) - Constant time with simple data copy
	 * @exception Strong exception safety guarantee
	 * 
	 * @note Invalid dates are preserved as-is in the object
	 * @note No time or timezone components will be available
	 * @note The object will be non-null even if the date is invalid
	 * 
	 * @example
	 * @code
	 * QTomlDateTime birthday(QDate(1990, 12, 25));
	 * Q_ASSERT(birthday.date() == QDate(1990, 12, 25));
	 * Q_ASSERT(!birthday.time().isValid());
	 * @endcode
	 * 
	 * @see date() for retrieving the date component
	 */
	explicit QTomlDateTime(const QDate& date);
	
	/**
	 * @brief Constructs QTomlDateTime from a time (time-only representation).
	 * 
	 * Creates a QTomlDateTime representing a local time without date information,
	 * corresponding to TOML's time format "HH:MM:SS" or "HH:MM:SS.ffffff".
	 * This represents times of day without any date or timezone context.
	 * 
	 * @param time The QTime object containing the time information
	 * 
	 * @complexity O(1) - Constant time with simple data copy
	 * @exception Strong exception safety guarantee
	 * 
	 * @note Microsecond precision is preserved if present
	 * @note Invalid times are preserved as-is in the object
	 * @note No date or timezone components will be available
	 * 
	 * @example
	 * @code
	 * QTomlDateTime meetingTime(QTime(14, 30, 45, 123));
	 * Q_ASSERT(meetingTime.time() == QTime(14, 30, 45, 123));
	 * Q_ASSERT(!meetingTime.date().isValid());
	 * @endcode
	 * 
	 * @see time() for retrieving the time component
	 */
	explicit QTomlDateTime(const QTime& time);
	
	/**
	 * @brief Constructs QTomlDateTime from a complete date-time.
	 * 
	 * Creates a QTomlDateTime representing a complete date-time value with
	 * timezone information, corresponding to TOML's date-time formats with
	 * timezone offsets or UTC designation. All temporal components are
	 * extracted and preserved.
	 * 
	 * @param datetime The QDateTime object containing complete temporal information
	 * 
	 * @complexity O(1) - Constant time with component extraction
	 * @exception Strong exception safety guarantee
	 * 
	 * @note Invalid QDateTime objects result in null QTomlDateTime objects
	 * @note All precision and timezone information is preserved
	 * @note Uses branch prediction optimization for valid inputs
	 * 
	 * @example
	 * @code
	 * QDateTime moment = QDateTime::currentDateTimeUtc();
	 * QTomlDateTime timestamp(moment);
	 * Q_ASSERT(timestamp.toQDateTime() == moment);
	 * @endcode
	 * 
	 * @see date(), time(), timeZone() for component access
	 * @see toQDateTime() for reverse conversion
	 */
	explicit QTomlDateTime(const QDateTime& datetime);
	
	/**
	 * @brief Copy constructor for deep copying temporal data.
	 * 
	 * Creates an independent copy of another QTomlDateTime object,
	 * including all temporal components and internal state. The copy
	 * is completely separate from the source object.
	 * 
	 * @param other The QTomlDateTime object to copy
	 * 
	 * @complexity O(1) - Constant time with small data copy overhead
	 * @exception Strong exception safety guarantee
	 * 
	 * @note Creates completely independent copy
	 * @note All temporal precision is preserved
	 */
	QTomlDateTime(const QTomlDateTime& other);
	
	/**
	 * @brief Move constructor for efficient resource transfer.
	 * 
	 * Creates a QTomlDateTime by taking ownership of another object's
	 * resources, leaving the source in a valid but unspecified state.
	 * 
	 * @param other Rvalue reference to QTomlDateTime to move from
	 * 
	 * @complexity O(1) - Constant time resource transfer
	 * @exception noexcept guarantee
	 * 
	 * @note Source object remains valid but should not be used
	 * @note Enables return value optimization
	 */
	QTomlDateTime(QTomlDateTime&& other) noexcept;
	
	/**
	 * @brief Virtual destructor ensuring proper cleanup.
	 * 
	 * Automatically releases all resources through RAII principles.
	 * Uses std::unique_ptr for automatic memory management.
	 * 
	 * @complexity O(1) - Constant time cleanup
	 * @exception noexcept guarantee
	 * 
	 * @note Virtual for potential future inheritance
	 * @note Automatic cleanup through RAII
	 */
	virtual ~QTomlDateTime() noexcept;

	// ==================== Assignment Operations ====================
	
	/**
	 * @brief Copy assignment operator with self-assignment protection.
	 * 
	 * Replaces this object's contents with a copy of another object's
	 * temporal data. Includes protection against self-assignment for
	 * safety and efficiency.
	 * 
	 * @param other The QTomlDateTime object to copy from
	 * @return Reference to this object for assignment chaining
	 * 
	 * @complexity O(1) - Constant time with copy overhead
	 * @exception Strong exception safety guarantee
	 * 
	 * @note Self-assignment is detected and handled efficiently
	 * @note Supports assignment chaining
	 */
	QTomlDateTime& operator=(const QTomlDateTime& other);
	
	/**
	 * @brief Move assignment operator for efficient resource transfer.
	 * 
	 * Replaces this object's contents by taking ownership of another
	 * object's resources. Previous contents are automatically cleaned up.
	 * 
	 * @param other Rvalue reference to QTomlDateTime to move from
	 * @return Reference to this object for assignment chaining
	 * 
	 * @complexity O(1) - Constant time resource transfer
	 * @exception noexcept guarantee
	 * 
	 * @note Previous contents are automatically cleaned up
	 * @note Source object should not be used after move
	 */
	QTomlDateTime& operator=(QTomlDateTime&& other) noexcept;

	// ==================== State Query Methods ====================
	
	/**
	 * @brief Checks if the object is in null state.
	 * 
	 * Determines whether this QTomlDateTime represents a null/empty
	 * temporal value, distinct from invalid but non-null temporal data.
	 * 
	 * @return true if object is null, false otherwise
	 * 
	 * @complexity O(1) - Constant time state check
	 * @exception noexcept guarantee
	 * 
	 * @note Null state is different from invalid temporal values
	 * @note Default-constructed objects are null
	 * @note Objects with invalid input data may or may not be null
	 * 
	 * @example
	 * @code
	 * QTomlDateTime dt1;                    // Default constructor
	 * Q_ASSERT(dt1.isNull());              // True - null state
	 * 
	 * QTomlDateTime dt2(QDate());          // Invalid date
	 * Q_ASSERT(!dt2.isNull());             // False - not null, just invalid
	 * @endcode
	 */
	bool isNull() const noexcept;

	// ==================== Component Access Methods ====================
	
	/**
	 * @brief Retrieves the date component of the temporal value.
	 * 
	 * Returns the date portion if this object contains date information
	 * (date-only or date-time objects). For time-only or null objects,
	 * returns an invalid QDate.
	 * 
	 * @return QDate containing date component, or invalid QDate if none exists
	 * 
	 * @complexity O(1) - Constant time with branch prediction optimization
	 * @exception noexcept guarantee
	 * 
	 * @note Uses branch prediction for performance optimization
	 * @note Returns invalid QDate for time-only and null objects
	 * @note No data conversion occurs
	 * 
	 * @example
	 * @code
	 * QTomlDateTime dt(QDate(2023, 12, 25));
	 * Q_ASSERT(dt.date() == QDate(2023, 12, 25));
	 * Q_ASSERT(dt.date().isValid());
	 * @endcode
	 * 
	 * @see QDate::isValid() for checking return value validity
	 */
	QDate date() const noexcept;
	
	/**
	 * @brief Retrieves the time component of the temporal value.
	 * 
	 * Returns the time portion if this object contains time information
	 * (time-only or date-time objects). For date-only or null objects,
	 * returns an invalid QTime.
	 * 
	 * @return QTime containing time component, or invalid QTime if none exists
	 * 
	 * @complexity O(1) - Constant time with branch prediction optimization
	 * @exception noexcept guarantee
	 * 
	 * @note Preserves all time precision including microseconds
	 * @note Uses branch prediction for performance optimization
	 * @note Returns invalid QTime for date-only and null objects
	 * 
	 * @example
	 * @code
	 * QTomlDateTime dt(QTime(14, 30, 45, 123));
	 * Q_ASSERT(dt.time() == QTime(14, 30, 45, 123));
	 * Q_ASSERT(dt.time().msec() == 123);
	 * @endcode
	 * 
	 * @see QTime::isValid() for checking return value validity
	 */
	QTime time() const noexcept;
	
	/**
	 * @brief Retrieves the timezone component of the temporal value.
	 * 
	 * Returns timezone information if this object represents a complete
	 * date-time with timezone data. For date-only, time-only, or null
	 * objects, returns an invalid QTimeZone.
	 * 
	 * @return QTimeZone containing timezone information, or invalid QTimeZone if none exists
	 * 
	 * @complexity O(1) - Constant time with branch prediction optimization
	 * @exception noexcept guarantee
	 * 
	 * @note Only date-time objects can have timezone information
	 * @note Supports UTC, offset, and named timezones
	 * @note Uses branch prediction for performance optimization
	 * 
	 * @example
	 * @code
	 * QDateTime utcTime = QDateTime::currentDateTimeUtc();
	 * QTomlDateTime dt(utcTime);
	 * Q_ASSERT(dt.timeZone() == QTimeZone::utc());
	 * @endcode
	 * 
	 * @see QTimeZone::isValid() for checking return value validity
	 */
	QTimeZone timeZone() const noexcept;

	// ==================== Qt Integration Methods ====================
	
	/**
	 * @brief Converts to QDateTime with appropriate handling for each type.
	 * 
	 * Reconstructs a QDateTime object from the stored temporal components,
	 * with behavior depending on the type of data stored:
	 * - Date-time objects: Complete reconstruction with all components
	 * - Date-only objects: Date at midnight UTC
	 * - Time-only objects: Invalid QDateTime (no meaningful conversion)
	 * - Null objects: Invalid QDateTime
	 * 
	 * @return QDateTime with reconstructed temporal data, or invalid QDateTime
	 * 
	 * @complexity O(1) - Constant time component assembly
	 * @exception noexcept guarantee
	 * 
	 * @note Date-only values become midnight UTC
	 * @note Time-only values result in invalid QDateTime
	 * @note All precision and timezone information is preserved
	 * 
	 * @example
	 * @code
	 * // Date-time round-trip
	 * QDateTime original = QDateTime::currentDateTime();
	 * QTomlDateTime dt(original);
	 * Q_ASSERT(dt.toQDateTime() == original);
	 * 
	 * // Date-only conversion
	 * QTomlDateTime dateOnly(QDate::currentDate());
	 * QDateTime result = dateOnly.toQDateTime();
	 * Q_ASSERT(result.time() == QTime(0, 0));
	 * Q_ASSERT(result.timeZone() == QTimeZone::utc());
	 * @endcode
	 * 
	 * @see QDateTime::isValid() for checking result validity
	 */
	QDateTime toQDateTime() const noexcept;

private:
	/**
	 * @brief Friend class for internal conversion operations.
	 * 
	 * Grants access to private members for efficient conversion between
	 * TOML++ native types and QTomlDateTime objects during parsing and
	 * serialization operations.
	 * 
	 * @note Used internally by the TOML parsing and generation system
	 * @note Provides efficient conversion without exposing implementation details
	 */
	friend class QTomlPrivateConverter;
	
	/**
	 * @brief Private implementation pointer (PIMPL pattern).
	 * 
	 * Pointer to private implementation containing all temporal data and
	 * internal state. Provides binary compatibility, compilation hiding,
	 * and efficient memory management through std::unique_ptr.
	 * 
	 * Contains:
	 * - Temporal type indicator (date, time, date-time, null)
	 * - Date component (QDate)
	 * - Time component (QTime)  
	 * - Timezone component (QTimeZone)
	 * 
	 * @note Uses std::unique_ptr for automatic memory management
	 * @note Enables binary compatibility across library versions
	 * @note Hides implementation details from client code
	 * 
	 * @see QTomlDateTimePrivate for implementation details
	 */
	std::unique_ptr<QTomlDateTimePrivate> d_ptr;
};

/**
 * @brief Qt Meta-Object System registration for QTomlDateTime.
 * 
 * Registers QTomlDateTime with Qt's type system, enabling use in QVariant
 * containers, signal/slot connections, and property systems. This macro
 * provides the necessary type information for Qt's reflection system.
 * 
 * Enables:
 * - QVariant::fromValue<QTomlDateTime>() and QVariant::value<QTomlDateTime>()
 * - Signal/slot parameters using QTomlDateTime
 * - Q_PROPERTY declarations with QTomlDateTime
 * - QML integration (if needed)
 * - Serialization through Qt's property system
 * 
 * @note Registration occurs automatically during static initialization
 * @note Required for full Qt integration and QVariant support
 * @see QMetaType for more information about Qt's type system
 */
Q_DECLARE_METATYPE(QTomlDateTime)